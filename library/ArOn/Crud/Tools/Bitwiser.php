<?php
/*
      +------------+-------------------------------------+-------------+
      | HEX 	   | BIN 								 | DEC 		   |
      +------------+-------------------------------------+-------------+
      | 0x00000001 | 00000000 00000000 00000000 00000001 |			 1 |
      | 0x00000002 | 00000000 00000000 00000000 00000010 | 			 2 |
      | 0x00000004 | 00000000 00000000 00000000 00000100 |			 4 |
      | 0x00000008 | 00000000 00000000 00000000 00001000 |			 8 |
      | 0x00000010 | 00000000 00000000 00000000 00010000 |			16 |
      | 0x00000020 | 00000000 00000000 00000000 00100000 |			32 |
      | 0x00000040 | 00000000 00000000 00000000 01000000 | 			64 |
      | 0x00000080 | 00000000 00000000 00000000 10000000 | 		   128 |
      | 0x00000100 | 00000000 00000000 00000001 00000000 | 		   256 |
      | 0x00000200 | 00000000 00000000 00000010 00000000 | 		   512 |
      | 0x00000400 | 00000000 00000000 00000100 00000000 | 		  1024 |
      | 0x00000800 | 00000000 00000000 00001000 00000000 | 		  2048 |
      | 0x00001000 | 00000000 00000000 00010000 00000000 | 		  4096 |
      | 0x00002000 | 00000000 00000000 00100000 00000000 | 		  8192 |
      | 0x00004000 | 00000000 00000000 01000000 00000000 | 		 16384 |
      | 0x00008000 | 00000000 00000000 10000000 00000000 | 		 32768 |
      | 0x00010000 | 00000000 00000001 00000000 00000000 | 		 65536 |
      | 0x00020000 | 00000000 00000010 00000000 00000000 | 		131072 |
      | 0x00040000 | 00000000 00000100 00000000 00000000 | 		262144 |
      | 0x00080000 | 00000000 00001000 00000000 00000000 | 		524288 |
      | 0x00100000 | 00000000 00010000 00000000 00000000 | 	   1048576 |
      | 0x00200000 | 00000000 00100000 00000000 00000000 | 	   2097152 |
      | 0x00400000 | 00000000 01000000 00000000 00000000 | 	   4194304 |
      | 0x00800000 | 00000000 10000000 00000000 00000000 | 	   8388608 |
      | 0x01000000 | 00000001 00000000 00000000 00000000 | 	  16777216 |
      | 0x02000000 | 00000010 00000000 00000000 00000000 | 	  33554432 |
      | 0x04000000 | 00000100 00000000 00000000 00000000 |    67108864 |
      | 0x08000000 | 00001000 00000000 00000000 00000000 |   134217728 |
      | 0x10000000 | 00010000 00000000 00000000 00000000 |   268435456 |
      | 0x20000000 | 00100000 00000000 00000000 00000000 |   536870912 |
      | 0x40000000 | 01000000 00000000 00000000 00000000 |  1073741824 |
      +------------+-------------------------------------+-------------+
*/

class ArOn_Crud_Tools_Bitwiser {
	
		public static function dec2bin($dec) {
			$result    = '';
			$shift    = 0;
		
			if ($dec<0) {
				$minus=true;                        // отрицательное
				$dec=-1*($dec+1);                   // делаем NOT, чтоб делить положительное число, но ставим флаг что отрицательное
			}
			else {
				$minus=false;
			}
		
			while ( pow(2, $shift) < $dec ){         // стандартные наработки
				++$shift;
			}
			while ( 0 <= $shift ){
				$pow = pow(2, $shift);
				if ( $pow <= $dec ){
					$dec-= $pow;
					$result = $result . ($minus?'0':'1');   // если отрицательное число у нас, то NOT
				}
				else {
					$result = $result . ($minus?'1':'0');
				}
				--$shift;
			}
			$result=str_pad($result, 64, ($minus?"1":"0"), STR_PAD_LEFT);
			// заполняем результат слева, чтобы было 64 символа (дальше поймете почему)
			return $result;
		}
		
		public static function bin2dec($c) {
			if ($c>'0000000000000000000000000000000001111111111111111111111111111111') {
			
				for ($i=63;$i>=0;$i--) {
					$c[$i]=((int)$c[$i]^1); //^1;
				}
			
				$c=base_convert(substr($c,32), 2, 10);
				$c=-1*($c+1);
			}
			else {
				$c=bindec($c);
			}
		
			return $c;
		}
		
		public static function xor($a, $b) {// переменные передаются в десятичной форме
			$c='0000000000000000000000000000000000000000000000000000000000000000';
		
			$a=dec2bin($a);
			$b=dec2bin($b);
		
			for ($i=63;$i>=0;$i--) {
				$c[$i]=((int)$a[$i]^(int)$b[$i]); // обычный xor, только у нас по побитам
			}
		
			$c=bin2dec($c); // !!! описано ниже!
			return $c;
		}
		
		public static function shl($a, $bit){ // shr делается так же, только нули добавляются справа
			$a=dec2bin($a);
			$a=str_pad($a, 64+$bit, "0", STR_PAD_RIGHT); // добавляем справа "0" количество $bit
			$c=substr($a,$bit); // а теперь отрезаем, тоесть сдвинули влево на $bit
		
			$c=bin2dec($c); // !!! описано ниже!
		
			return $c;
		}
}
	// Security permissions:
	$writePost = 1;
	$readPost = 2;
	$deletePost = 4;
	$addUser = 8;
	$deleteUser = 16;

	// User groups:
	$administrator = $writePost | $readPosts | $deletePosts | $addUser | $deleteUser;
	$moderator = $readPost | $deletePost | $deleteUser;
	$writer = $writePost | $readPost;
	$guest = $readPost;

	// function to check for permission
	function checkPermission($user, $permission) {
		if($user & $permission) {
			return true;
		}
		else {
			return false;
		}
	}

	// Now we apply all of this!
	if(checkPermission($administrator, $deleteUser)) {
		deleteUser("Some User"); # This is executed because $administrator can $deleteUser
	}